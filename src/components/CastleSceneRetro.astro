---
/**
 * CastleSceneRetro.astro
 * Strict 8-bit Dover-style integrated fortress.
 * Single architectural language: 8px grid, unified outline, one light source (top-right).
 * Reduced palette: 8-16 colours, consistent stone treatment, hard pixel shadows.
 */

const uid = Math.random().toString(36).slice(2, 11)

// STRICT 8PX GRID HELPERS
// Window component - 32x32 standardized
const Window = (x: number, y: number) => ({
  outer: { x, y, width: 32, height: 32 },
  frame: { x: x + 2, y: y + 2, width: 28, height: 28 },
  light: { x: x + 4, y: y + 4, width: 24, height: 24 },
  crossV: { x: x + 14, y: y + 2, width: 2, height: 28 },
  crossH: { x: x + 2, y: y + 14, width: 28, height: 2 },
  highlight: { x: x + 20, y: y + 6, width: 6, height: 20 }, // Right rim light
})

// Unified merlon/battlement - consistent 24x24
const Merlon = (x: number, y: number) => ({
  main: { x, y, width: 24, height: 24 },
  highlight: { x: x + 18, y: y + 2, width: 4, height: 20 }, // Right rim
  shadow: { x: x + 2, y: y + 2, width: 4, height: 20 }, // Left face
})

// Brick pattern - stepped pixel blocks
const BrickRow = (x: number, y: number, width: number, offset = 0) => {
  const bricks: Array<{ x: number; y: number; width: number; height: number }> =
    []
  const brickWidth = 16
  const brickHeight = 8
  for (let i = 0; i < Math.floor(width / brickWidth); i++) {
    bricks.push({
      x: x + i * brickWidth + offset,
      y,
      width: brickWidth - 2,
      height: brickHeight,
    })
  }
  return bricks
}
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 1200 600"
  role="img"
  aria-labelledby={`${uid}-title`}
  class="castle-scene-retro"
>
  <title id={`${uid}-title`}>
    Securing the Realm - 8-bit Castle Navigation
  </title>
  <desc id={`${uid}-desc`}>
    A pixel-art castle with four sections: Tower (talks), Library (blog), Forge
    (projects), and Newsletter scrolls.
  </desc>

  <defs>
    <linearGradient id={`${uid}-sky`} x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color: var(--colour-sky-dark)"></stop>
      <stop offset="60%" style="stop-color: var(--colour-teal-dark)"></stop>
      <stop offset="100%" style="stop-color: var(--colour-teal-bg)"></stop>
    </linearGradient>

    <linearGradient id={`${uid}-ground`} x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color: var(--colour-grass)"></stop>
      <stop offset="40%" style="stop-color: var(--colour-ground-mid)"></stop>
      <stop offset="100%" style="stop-color: var(--colour-ground-dark)"></stop>
    </linearGradient>

    <radialGradient id={`${uid}-forge-glow`}>
      <stop
        offset="0%"
        style="stop-color: var(--colour-forge-yellow); stop-opacity: 0.9"
      ></stop>
      <stop
        offset="60%"
        style="stop-color: var(--colour-forge-orange); stop-opacity: 0.6"
      ></stop>
      <stop
        offset="100%"
        style="stop-color: var(--colour-forge-orange); stop-opacity: 0"></stop>
    </radialGradient>
  </defs>

  <!-- Sky Background -->
  <rect width="1200" height="480" fill={`url(#${uid}-sky)`}></rect>

  <!-- Stars -->
  {
    [
      [120, 80],
      [280, 120],
      [480, 40],
      [720, 96],
      [920, 64],
      [1080, 128],
      [200, 160],
      [600, 136],
    ].map(([x, y]) => (
      <g class="star-twinkle">
        <rect
          x={x + 3}
          y={y}
          width="2"
          height="8"
          fill="var(--colour-parchment)"
          opacity="0.8"
        />
        <rect
          x={x}
          y={y + 3}
          width="8"
          height="2"
          fill="var(--colour-parchment)"
          opacity="0.8"
        />
      </g>
    ))
  }

  <!-- Moon (crisp circle, top-right light source) -->
  <circle
    cx="1080"
    cy="120"
    r="48"
    fill="#f3e9d2"
    opacity="0.2"
    class="moon-glow"></circle>
  <circle
    cx="1080"
    cy="120"
    r="40"
    fill="#f3e9d2"
    stroke="#d5d5c5"
    stroke-width="2"></circle>
  <!-- Moon craters (hard pixel shapes) -->
  <rect x="1068" y="108" width="8" height="8" fill="#d5d5c5" opacity="0.4"
  ></rect>
  <rect x="1084" y="120" width="8" height="8" fill="#d5d5c5" opacity="0.3"
  ></rect>

  <!-- Ground -->
  <rect x="0" y="480" width="1200" height="120" fill={`url(#${uid}-ground)`}
  ></rect>

  <!-- Grass texture (pixel tufts, 8px grid) -->
  {
    [...Array(60)].map((_: undefined, i: number) => {
      const x = (i * 20) % 1200
      const y = 480 + ((i * 3) % 5) * 8
      return (
        <g opacity="0.4">
          <rect x={x} y={y} width="2" height="8" fill="#4a6a3a" />
          <rect x={x + 4} y={y + 2} width="2" height="6" fill="#4a6a3a" />
        </g>
      )
    })
  }

  <!-- INTEGRATED FOUNDATION (Dover-style plinth) -->
  <rect
    x="80"
    y="424"
    width="1040"
    height="56"
    fill="#5a5a52"
    stroke="#000"
    stroke-width="2"></rect>
  <!-- Right rim highlight (light from top-right) -->
  <rect x="1112" y="426" width="8" height="52" fill="#fff" opacity="0.15"
  ></rect>
  <!-- Left shadow face -->
  <rect x="80" y="426" width="8" height="52" fill="#000" opacity="0.25"></rect>
  <!-- Hard pixel shadow on ground -->
  <rect x="88" y="480" width="1024" height="8" fill="#000" opacity="0.3"></rect>

  <!-- CONNECTING CURTAIN WALLS (Dover-style integrated fortress) -->
  <!-- Wall between Tower and Library -->
  <rect
    x="320"
    y="360"
    width="40"
    height="80"
    fill="var(--colour-stone)"
    stroke="var(--colour-black)"
    stroke-width="2"></rect>
  <rect
    x="352"
    y="360"
    width="8"
    height="80"
    fill="var(--colour-white)"
    opacity="0.10"></rect>

  <!-- Wall between Library and Keep -->
  <rect
    x="560"
    y="320"
    width="40"
    height="120"
    fill="var(--colour-stone)"
    stroke="var(--colour-black)"
    stroke-width="2"></rect>
  <rect
    x="592"
    y="320"
    width="8"
    height="120"
    fill="var(--colour-white)"
    opacity="0.10"></rect>

  <!-- Wall between Keep and Forge -->
  <rect
    x="840"
    y="320"
    width="40"
    height="120"
    fill="var(--colour-stone)"
    stroke="var(--colour-black)"
    stroke-width="2"></rect>
  <rect
    x="872"
    y="320"
    width="8"
    height="120"
    fill="var(--colour-white)"
    opacity="0.10"></rect>

  <!-- TOWER SECTION (Left) -->
  <a href="/talks/" aria-label="Tower - View video talks">
    <g class="castle-section">
      <!-- Tower Body (TALLER) -->
      <rect
        x="160"
        y="120"
        width="160"
        height="320"
        fill="var(--colour-stone)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="312"
        y="120"
        width="8"
        height="320"
        fill="var(--colour-white)"
        opacity="0.10"></rect>
      <rect
        x="160"
        y="120"
        width="8"
        height="320"
        fill="var(--colour-black)"
        opacity="0.15"></rect>

      <!-- Ivy climbing tower (Nintendo charm) -->
      <path
        d="M 168 420 L 168 380 L 172 360 L 168 340 L 172 320"
        stroke="var(--colour-grass)"
        stroke-width="3"
        fill="none"
        opacity="0.4"></path>
      <circle cx="168" cy="410" r="3" fill="var(--colour-grass)" opacity="0.5"
      ></circle>
      <circle cx="172" cy="370" r="3" fill="var(--colour-grass)" opacity="0.5"
      ></circle>
      <circle cx="168" cy="350" r="3" fill="var(--colour-grass)" opacity="0.5"
      ></circle>

      <!-- Brick texture (stepped 8x8 blocks) -->
      {
        [...Array(34)].map((_: undefined, row: number) => (
          <g opacity="0.15">
            {BrickRow(168, 160 + row * 8, 144, row % 2 === 0 ? 0 : -8).map(
              (brick: {
                x: number
                y: number
                width: number
                height: number
              }) => (
                <rect {...brick} fill="#000" />
              )
            )}
          </g>
        ))
      }

      <!-- Tower flag (animated) -->
      <rect x="236" y="72" width="8" height="48" fill="var(--colour-stone-dark)"
      ></rect>
      <path
        d="M 244 76 L 268 84 L 244 92 Z"
        fill="var(--colour-gold)"
        stroke="var(--colour-gold-dark)"
        stroke-width="1"
        class="flag-wave"></path>
      <path
        d="M 244 76 L 268 84 L 244 92 Z"
        fill="var(--colour-gold-dark)"
        opacity="0.3"
        transform="translate(2, 2)"></path>

      <!-- Tower Battlements -->
      {
        [0, 1, 2, 3, 4, 5].map((i: number) => {
          const m = Merlon(160 + i * 24 + (i % 2 === 0 ? 0 : 12), 96)
          return (
            <g>
              <rect
                {...m.main}
                fill="var(--colour-stone)"
                stroke="var(--colour-black)"
                stroke-width="2"
              />
              <rect
                {...m.highlight}
                fill="var(--colour-white)"
                opacity="0.12"
              />
              <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
            </g>
          )
        })
      }

      <!-- Tower Windows (standardized 32x32 grid) -->
      {
        [
          Window(192, 192),
          Window(192, 256),
          Window(192, 320),
          Window(192, 384),
        ].map((w) => (
          <g class="window-flicker">
            <rect {...w.outer} fill="#000" opacity="0.4" />
            <rect {...w.light} fill="#d5a425" opacity="0.85" />
            <rect {...w.crossV} fill="#3a3a32" opacity="0.6" />
            <rect {...w.crossH} fill="#3a3a32" opacity="0.6" />
            <rect {...w.highlight} fill="#fff" opacity="0.2" />
          </g>
        ))
      }

      <!-- Label -->
      <text
        x="240"
        y="88"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="11"
        letter-spacing="1">TOWER</text
      >

      <rect
        x="160"
        y="96"
        width="160"
        height="344"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- LIBRARY SECTION (Center-Left) -->
  <a href="/blog/" aria-label="Library - Read blog posts">
    <g class="castle-section">
      <!-- Library Body -->
      <rect
        x="360"
        y="240"
        width="200"
        height="200"
        fill="var(--colour-stone)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="552"
        y="240"
        width="8"
        height="200"
        fill="var(--colour-white)"
        opacity="0.10"></rect>
      <rect
        x="360"
        y="240"
        width="8"
        height="200"
        fill="var(--colour-black)"
        opacity="0.15"></rect>

      <!-- Brick texture -->
      {
        [...Array(19)].map((_: undefined, row: number) => (
          <g opacity="0.15">
            {BrickRow(368, 280 + row * 8, 184, row % 2 === 0 ? 0 : -8).map(
              (brick: {
                x: number
                y: number
                width: number
                height: number
              }) => (
                <rect {...brick} fill="#000" />
              )
            )}
          </g>
        ))
      }

      <!-- Library flag -->
      <rect
        x="456"
        y="132"
        width="8"
        height="48"
        fill="var(--colour-stone-dark)"></rect>
      <path
        d="M 464 136 L 488 144 L 464 152 Z"
        fill="var(--colour-gold)"
        stroke="var(--colour-gold-dark)"
        stroke-width="1"
        class="flag-wave"
        style="animation-delay: 0.5s"></path>
      <path
        d="M 464 136 L 488 144 L 464 152 Z"
        fill="var(--colour-gold-dark)"
        opacity="0.3"
        transform="translate(2, 2)"></path>

      <!-- Library Roof (Link's Awakening rounded style) -->
      <ellipse
        cx="460"
        cy="240"
        rx="110"
        ry="60"
        fill="var(--colour-roof-depth)"
        stroke="var(--colour-black)"
        stroke-width="2"></ellipse>
      <!-- Roof shading -->
      <ellipse
        cx="460"
        cy="235"
        rx="105"
        ry="55"
        fill="var(--colour-black)"
        opacity="0.15"></ellipse>
      <!-- Roof highlight -->
      <ellipse
        cx="460"
        cy="245"
        rx="100"
        ry="50"
        fill="var(--colour-white)"
        opacity="0.08"></ellipse>

      <!-- Library Battlements -->
      {
        [0, 1, 2, 3, 4, 5, 6, 7].map((i: number) => {
          const m = Merlon(360 + i * 24 + (i % 2 === 0 ? 0 : 12), 216)
          return (
            <g>
              <rect
                {...m.main}
                fill="var(--colour-stone)"
                stroke="var(--colour-black)"
                stroke-width="2"
              />
              <rect
                {...m.highlight}
                fill="var(--colour-white)"
                opacity="0.12"
              />
              <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
            </g>
          )
        })
      }

      <!-- Library Windows (aligned grid) -->
      {
        [
          Window(380, 304),
          Window(444, 304),
          Window(508, 304),
          Window(380, 360),
          Window(508, 360),
        ].map((w) => (
          <g class="window-flicker">
            <rect {...w.outer} fill="#000" opacity="0.4" />
            <rect {...w.light} fill="#d5a425" opacity="0.85" />
            <rect {...w.crossV} fill="#3a3a32" opacity="0.6" />
            <rect {...w.crossH} fill="#3a3a32" opacity="0.6" />
            <rect {...w.highlight} fill="#fff" opacity="0.2" />
          </g>
        ))
      }

      <!-- Library Door (OPEN with visible books) -->
      <rect
        x="440"
        y="384"
        width="40"
        height="56"
        fill="var(--colour-black)"
        opacity="0.6"></rect>
      <ellipse cx="460" cy="384" rx="20" ry="8" fill="var(--colour-stone-dark)"
      ></ellipse>

      <!-- Visible books on shelves inside -->
      <g opacity="0.9">
        <!-- Left shelf books -->
        <rect
          x="444"
          y="392"
          width="6"
          height="12"
          fill="var(--colour-gold-dark)"></rect>
        <rect
          x="450"
          y="392"
          width="4"
          height="12"
          fill="var(--colour-parchment)"></rect>
        <rect
          x="454"
          y="392"
          width="6"
          height="12"
          fill="var(--colour-stone-dark)"></rect>
        <rect
          x="444"
          y="408"
          width="5"
          height="12"
          fill="var(--colour-parchment)"></rect>
        <rect x="449" y="408" width="6" height="12" fill="var(--colour-gold)"
        ></rect>
        <rect x="455" y="408" width="5" height="12" fill="var(--colour-stone)"
        ></rect>

        <!-- Right shelf books -->
        <rect x="464" y="392" width="6" height="12" fill="var(--colour-stone)"
        ></rect>
        <rect
          x="470"
          y="392"
          width="5"
          height="12"
          fill="var(--colour-gold-dark)"></rect>
        <rect
          x="464"
          y="408"
          width="6"
          height="12"
          fill="var(--colour-parchment)"></rect>
        <rect x="470" y="408" width="6" height="12" fill="var(--colour-gold)"
        ></rect>
      </g>

      <!-- Label -->
      <text
        x="460"
        y="168"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="11"
        letter-spacing="1">LIBRARY</text
      >

      <rect
        x="360"
        y="180"
        width="210"
        height="260"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- MAIN KEEP (Center - massive Great Tower like Dover) -->
  <g>
    <!-- Thicker walls with buttressing -->
    <rect
      x="592"
      y="160"
      width="256"
      height="280"
      fill="var(--colour-stone)"
      stroke="var(--colour-black)"
      stroke-width="2"></rect>
    <rect
      x="840"
      y="160"
      width="8"
      height="280"
      fill="var(--colour-white)"
      opacity="0.12"></rect>
    <rect
      x="592"
      y="160"
      width="8"
      height="280"
      fill="var(--colour-black)"
      opacity="0.18"></rect>

    <!-- Corner buttresses (Dover has prominent corners) -->
    <rect
      x="584"
      y="160"
      width="16"
      height="280"
      fill="var(--colour-stone-dark)"
      opacity="0.3"></rect>
    <rect
      x="848"
      y="160"
      width="16"
      height="280"
      fill="var(--colour-stone-dark)"
      opacity="0.3"></rect>

    <!-- Brick texture -->
    {
      [...Array(29)].map((_: undefined, row: number) => (
        <g opacity="0.15">
          {BrickRow(608, 200 + row * 8, 224, row % 2 === 0 ? 0 : -8).map(
            (brick: {
              x: number
              y: number
              width: number
              height: number
            }) => (
              <rect {...brick} fill="#000" />
            )
          )}
        </g>
      ))
    }

    <!-- Keep flag (tallest) -->
    <rect x="716" y="88" width="8" height="72" fill="var(--colour-stone-dark)"
    ></rect>
    <path
      d="M 724 92 L 756 104 L 724 116 Z"
      fill="var(--colour-gold)"
      stroke="var(--colour-gold-dark)"
      stroke-width="1"
      class="flag-wave"
      style="animation-delay: 0.3s"></path>
    <path
      d="M 724 92 L 756 104 L 724 116 Z"
      fill="var(--colour-gold-dark)"
      opacity="0.3"
      transform="translate(2, 2)"></path>

    <!-- Heraldic banners (Ultima Online style) -->
    <!-- Left banner -->
    <rect
      x="604"
      y="220"
      width="16"
      height="48"
      fill="var(--colour-teal-dark)"
      stroke="var(--colour-black)"
      stroke-width="1"
      opacity="0.9"></rect>
    <path
      d="M 604 268 L 612 260 L 620 268 Z"
      fill="var(--colour-teal-dark)"
      opacity="0.9"></path>
    <rect
      x="608"
      y="228"
      width="8"
      height="8"
      fill="var(--colour-gold)"
      opacity="0.8"></rect>
    <!-- Right banner -->
    <rect
      x="820"
      y="220"
      width="16"
      height="48"
      fill="var(--colour-teal-dark)"
      stroke="var(--colour-black)"
      stroke-width="1"
      opacity="0.9"></rect>
    <path
      d="M 820 268 L 828 260 L 836 268 Z"
      fill="var(--colour-teal-dark)"
      opacity="0.9"></path>
    <rect
      x="824"
      y="228"
      width="8"
      height="8"
      fill="var(--colour-gold)"
      opacity="0.8"></rect>

    <!-- Keep Battlements -->
    {
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((i: number) => {
        const m = Merlon(592 + i * 24 + (i % 2 === 0 ? 0 : 12), 136)
        return (
          <g>
            <rect
              {...m.main}
              fill="var(--colour-stone)"
              stroke="var(--colour-black)"
              stroke-width="2"
            />
            <rect {...m.highlight} fill="var(--colour-white)" opacity="0.12" />
            <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
          </g>
        )
      })
    }

    <!-- Keep Windows (aligned grid) -->
    {
      [
        Window(632, 224),
        Window(752, 224),
        Window(632, 288),
        Window(752, 288),
        Window(632, 352),
        Window(752, 352),
      ].map((w) => (
        <g class="window-flicker">
          <rect {...w.outer} fill="#000" opacity="0.4" />
          <rect {...w.light} fill="#d5a425" opacity="0.85" />
          <rect {...w.crossV} fill="#3a3a32" opacity="0.6" />
          <rect {...w.crossH} fill="#3a3a32" opacity="0.6" />
          <rect {...w.highlight} fill="#fff" opacity="0.2" />
        </g>
      ))
    }

    <!-- Torch Sconces (Ultima Online style) -->
    <!-- Left torch -->
    <rect x="612" y="300" width="8" height="16" fill="var(--colour-stone-dark)"
    ></rect>
    <path d="M 616 296 L 612 300 L 620 300 Z" fill="var(--colour-stone-dark)"
    ></path>
    <ellipse
      cx="616"
      cy="288"
      rx="6"
      ry="8"
      fill="var(--colour-forge-orange)"
      opacity="0.8"
      class="torch-flicker"></ellipse>
    <ellipse
      cx="616"
      cy="284"
      rx="4"
      ry="6"
      fill="var(--colour-forge-yellow)"
      opacity="0.9"
      class="torch-flicker"></ellipse>
    <!-- Right torch -->
    <rect x="820" y="300" width="8" height="16" fill="var(--colour-stone-dark)"
    ></rect>
    <path d="M 824 296 L 820 300 L 828 300 Z" fill="var(--colour-stone-dark)"
    ></path>
    <ellipse
      cx="824"
      cy="288"
      rx="6"
      ry="8"
      fill="var(--colour-forge-orange)"
      opacity="0.8"
      class="torch-flicker"></ellipse>
    <ellipse
      cx="824"
      cy="284"
      rx="4"
      ry="6"
      fill="var(--colour-forge-yellow)"
      opacity="0.9"
      class="torch-flicker"></ellipse>

    <!-- Keep Gate -->
    <rect
      x="684"
      y="368"
      width="72"
      height="72"
      fill="var(--colour-teal-dark)"
      stroke="var(--colour-black)"
      stroke-width="2"></rect>
    <rect
      x="712"
      y="368"
      width="2"
      height="72"
      fill="var(--colour-stone-dark)"
      opacity="0.5"></rect>

    <!-- Portcullis chains (8-bit pixel chains) -->
    <rect x="692" y="368" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="692" y="376" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="692" y="384" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="744" y="368" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="744" y="376" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="744" y="384" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
  </g>

  <!-- FORGE SECTION (Right) -->
  <a href="/forge/" aria-label="Forge - Explore code projects">
    <g class="castle-section">
      <!-- Forge Back Wall (visible through open front) -->
      <rect
        x="1008"
        y="280"
        width="32"
        height="160"
        fill="var(--colour-stone-dark)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>

      <!-- Left Side Wall (solid) -->
      <rect
        x="880"
        y="280"
        width="32"
        height="160"
        fill="var(--colour-stone)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="904"
        y="280"
        width="8"
        height="160"
        fill="var(--colour-white)"
        opacity="0.10"></rect>
      <rect
        x="880"
        y="280"
        width="8"
        height="160"
        fill="var(--colour-black)"
        opacity="0.15"></rect>

      <!-- Right Side Wall (solid) -->
      <rect
        x="1008"
        y="280"
        width="32"
        height="160"
        fill="var(--colour-stone)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="1032"
        y="280"
        width="8"
        height="160"
        fill="var(--colour-white)"
        opacity="0.10"></rect>
      <rect
        x="1008"
        y="280"
        width="8"
        height="160"
        fill="var(--colour-black)"
        opacity="0.15"></rect>

      <!-- Roof Support Pillars -->
      <rect
        x="920"
        y="280"
        width="16"
        height="160"
        fill="var(--colour-stone-dark)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="984"
        y="280"
        width="16"
        height="160"
        fill="var(--colour-stone-dark)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>

      <!-- Brick texture on side walls -->
      {
        [...Array(16)].map((_: undefined, row: number) => (
          <g opacity="0.15">
            {BrickRow(888, 288 + row * 8, 16, row % 2 === 0 ? 0 : -8).map(
              (brick: {
                x: number
                y: number
                width: number
                height: number
              }) => (
                <rect {...brick} fill="var(--colour-black)" />
              )
            )}
            {BrickRow(1016, 288 + row * 8, 16, row % 2 === 0 ? 0 : -8).map(
              (brick: {
                x: number
                y: number
                width: number
                height: number
              }) => (
                <rect {...brick} fill="var(--colour-black)" />
              )
            )}
          </g>
        ))
      }

      <!-- Chimney -->
      <rect
        x="936"
        y="200"
        width="48"
        height="80"
        fill="var(--colour-stone-dark)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="976"
        y="200"
        width="8"
        height="80"
        fill="var(--colour-white)"
        opacity="0.08"></rect>

      <!-- Smoke -->
      <ellipse
        cx="960"
        cy="184"
        rx="16"
        ry="12"
        fill="var(--colour-smoke)"
        opacity="0.4"
        class="smoke smoke-1"></ellipse>
      <ellipse
        cx="956"
        cy="168"
        rx="20"
        ry="14"
        fill="var(--colour-smoke)"
        opacity="0.3"
        class="smoke smoke-2"></ellipse>
      <ellipse
        cx="964"
        cy="152"
        rx="18"
        ry="13"
        fill="var(--colour-smoke)"
        opacity="0.2"
        class="smoke smoke-3"></ellipse>

      <!-- Deep Interior Shadow (visible through open front) -->
      <rect
        x="912"
        y="288"
        width="96"
        height="144"
        fill="var(--colour-black)"
        opacity="0.5"></rect>

      <!-- Interior Floor (visible workshop floor) -->
      <rect
        x="912"
        y="416"
        width="96"
        height="24"
        fill="var(--colour-stone-dark)"
        opacity="0.8"></rect>

      <!-- Forge/Furnace with Glow (center back) -->
      <rect
        x="936"
        y="320"
        width="48"
        height="64"
        fill={`url(#${uid}-forge-glow)`}
        class="forge-glow-animation"></rect>
      <rect
        x="940"
        y="324"
        width="40"
        height="56"
        fill="var(--colour-forge-orange)"
        opacity="0.9"
        class="forge-glow-animation"></rect>

      <!-- Forge sparks (8-bit particles) -->
      <rect
        x="932"
        y="316"
        width="4"
        height="4"
        fill="var(--colour-forge-yellow)"
        class="spark spark-1"></rect>
      <rect
        x="980"
        y="312"
        width="4"
        height="4"
        fill="var(--colour-forge-yellow)"
        class="spark spark-2"></rect>
      <rect
        x="944"
        y="308"
        width="4"
        height="4"
        fill="var(--colour-gold-light)"
        class="spark spark-3"></rect>
      <rect
        x="968"
        y="318"
        width="4"
        height="4"
        fill="var(--colour-forge-yellow)"
        class="spark spark-4"></rect>

      <!-- Glowing embers rising (Nintendo magic) -->
      <circle
        cx="952"
        cy="280"
        r="2"
        fill="var(--colour-forge-yellow)"
        opacity="0.8"
        class="ember ember-1"></circle>
      <circle
        cx="964"
        cy="260"
        r="2"
        fill="var(--colour-forge-orange)"
        opacity="0.6"
        class="ember ember-2"></circle>
      <circle
        cx="958"
        cy="240"
        r="1.5"
        fill="var(--colour-gold-light)"
        opacity="0.4"
        class="ember ember-3"></circle>

      <!-- Anvil (visible in front) -->
      <rect
        x="904"
        y="400"
        width="32"
        height="8"
        fill="var(--colour-stone-dark)"></rect>
      <rect
        x="912"
        y="392"
        width="16"
        height="8"
        fill="var(--colour-stone-dark)"></rect>
      <rect x="916" y="384" width="8" height="8" fill="var(--colour-stone-dark)"
      ></rect>
      <rect
        x="914"
        y="408"
        width="12"
        height="32"
        fill="var(--colour-stone-dark)"></rect>
      <!-- Anvil highlight -->
      <rect
        x="916"
        y="384"
        width="6"
        height="2"
        fill="var(--colour-white)"
        opacity="0.4"></rect>

      <!-- Tools on wall (hammer, tongs) -->
      <rect
        x="888"
        y="300"
        width="4"
        height="24"
        fill="var(--colour-stone-dark)"></rect>
      <rect x="886" y="296" width="8" height="8" fill="var(--colour-stone-dark)"
      ></rect>
      <rect
        x="1028"
        y="304"
        width="4"
        height="20"
        fill="var(--colour-stone-dark)"></rect>
      <rect
        x="1026"
        y="300"
        width="8"
        height="4"
        fill="var(--colour-stone-dark)"></rect>

      <!-- Forge Battlements -->
      {
        [0, 1, 2, 3, 4, 5].map((i: number) => {
          const m = Merlon(880 + i * 24 + (i % 2 === 0 ? 0 : 12), 256)
          return (
            <g>
              <rect
                {...m.main}
                fill="var(--colour-stone)"
                stroke="var(--colour-black)"
                stroke-width="2"
              />
              <rect
                {...m.highlight}
                fill="var(--colour-white)"
                opacity="0.12"
              />
              <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
            </g>
          )
        })
      }

      <!-- Weathering/moss stains (Ultima Online lived-in feel) -->
      <ellipse
        cx="900"
        cy="380"
        rx="12"
        ry="16"
        fill="var(--colour-grass)"
        opacity="0.15"></ellipse>
      <ellipse
        cx="1020"
        cy="400"
        rx="10"
        ry="14"
        fill="var(--colour-grass)"
        opacity="0.12"></ellipse>

      <!-- Label -->
      <text
        x="960"
        y="248"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="11"
        letter-spacing="1">FORGE</text
      >

      <rect
        x="880"
        y="200"
        width="160"
        height="240"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- NEWSLETTER SCROLLS (On the Lawn) -->
  <a href="/newsletter/" aria-label="Newsletter - Subscribe to updates">
    <g class="castle-section">
      <!-- Flowers around scroll (Nintendo charm) -->
      <!-- Red flower -->
      <circle cx="1028" cy="540" r="4" fill="var(--colour-forge-orange)"
      ></circle>
      <rect x="1026" y="542" width="2" height="8" fill="var(--colour-grass)"
      ></rect>
      <!-- Yellow flower -->
      <circle cx="1164" cy="548" r="4" fill="var(--colour-gold)"></circle>
      <rect x="1162" y="550" width="2" height="8" fill="var(--colour-grass)"
      ></rect>
      <!-- Pink flower -->
      <circle cx="1020" cy="560" r="3" fill="var(--colour-gold-light)"></circle>
      <rect x="1018" y="562" width="2" height="6" fill="var(--colour-grass)"
      ></rect>

      <!-- Scroll -->
      <rect
        x="1040"
        y="520"
        width="112"
        height="72"
        rx="4"
        fill="var(--colour-parchment)"
        stroke="var(--colour-stone-dark)"
        stroke-width="2"></rect>
      <ellipse
        cx="1040"
        cy="556"
        rx="8"
        ry="36"
        fill="var(--colour-parchment-light)"
        stroke="var(--colour-stone-dark)"
        stroke-width="2"></ellipse>
      <ellipse
        cx="1152"
        cy="556"
        rx="8"
        ry="36"
        fill="var(--colour-parchment)"
        stroke="var(--colour-stone-dark)"
        stroke-width="2"></ellipse>

      <!-- Wax Seal -->
      <circle
        cx="1096"
        cy="556"
        r="16"
        fill="var(--colour-gold-dark)"
        stroke="var(--colour-black)"
        stroke-width="2"></circle>
      <text
        x="1096"
        y="562"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="12"
        font-weight="700">S</text
      >

      <!-- Label -->
      <text
        x="1096"
        y="512"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="9"
        letter-spacing="1">NEWSLETTER</text
      >

      <rect
        x="1032"
        y="504"
        width="128"
        height="96"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- Ground Shadows (SEGA-style layered depth) -->
  <!-- Deep shadow layer -->
  <ellipse
    cx="240"
    cy="488"
    rx="80"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.3"></ellipse>
  <!-- Mid shadow -->
  <ellipse
    cx="240"
    cy="486"
    rx="72"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>

  <ellipse
    cx="460"
    cy="488"
    rx="100"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.3"></ellipse>
  <ellipse
    cx="460"
    cy="486"
    rx="92"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>

  <ellipse
    cx="720"
    cy="488"
    rx="120"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.35"></ellipse>
  <ellipse
    cx="720"
    cy="486"
    rx="112"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>

  <ellipse
    cx="960"
    cy="488"
    rx="80"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.3"></ellipse>
  <ellipse
    cx="960"
    cy="486"
    rx="72"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>
</svg>

<style>
  .castle-scene-retro {
    width: 100%;
    height: auto;
    max-width: 1200px;
    display: block;
    shape-rendering: crispEdges;
  }

  @supports (image-rendering: pixelated) {
    .castle-scene-retro {
      image-rendering: pixelated;
    }
  }

  .castle-section {
    cursor: pointer;
    transition: transform 0.25s ease-in-out;
  }

  .castle-section:hover {
    transform: scale(1.02);
  }

  .castle-section:focus-visible {
    outline: 3px solid var(--colour-gold);
    outline-offset: 4px;
  }

  .section-hover {
    transition: opacity 0.25s ease-in-out;
  }

  .castle-section:hover .section-hover {
    opacity: 0.15;
  }

  .window-flicker {
    animation: window-flicker 2.5s steps(2, end) infinite;
  }

  @keyframes window-flicker {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.88;
    }
  }

  .forge-pulse {
    animation: forge-pulse 1.2s ease-in-out infinite;
  }

  @keyframes forge-pulse {
    0%,
    100% {
      opacity: 0.85;
    }
    50% {
      opacity: 1;
    }
  }

  .smoke {
    animation: smoke-rise 5s ease-out infinite;
  }

  .smoke-1 {
    animation-delay: 0s;
  }
  .smoke-2 {
    animation-delay: 2.5s;
  }

  @keyframes smoke-rise {
    0% {
      transform: translateY(0);
      opacity: 0.4;
    }
    100% {
      transform: translateY(-48px);
      opacity: 0;
    }
  }

  .star-twinkle {
    animation: star-twinkle 3s ease-in-out infinite;
  }

  @keyframes star-twinkle {
    0%,
    100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }

  .moon-glow {
    animation: moon-pulse 5s ease-in-out infinite;
  }

  @keyframes moon-pulse {
    0%,
    100% {
      opacity: 0.2;
    }
    50% {
      opacity: 0.4;
    }
  }

  .flag-wave {
    animation: flag-wave 2.5s ease-in-out infinite;
    transform-origin: left center;
  }

  @keyframes flag-wave {
    0%,
    100% {
      transform: scaleX(1);
    }
    50% {
      transform: scaleX(0.92);
    }
  }

  .spark {
    animation: spark-pop 1.8s ease-out infinite;
  }

  .spark-1 {
    animation-delay: 0s;
  }
  .spark-2 {
    animation-delay: 0.6s;
  }
  .spark-3 {
    animation-delay: 1.2s;
  }

  @keyframes spark-pop {
    0%,
    100% {
      opacity: 0;
      transform: translateY(0);
    }
    20% {
      opacity: 0.9;
      transform: translateY(-8px);
    }
    80% {
      opacity: 0.3;
      transform: translateY(-24px);
    }
  }

  .ember {
    animation: ember-rise 7s ease-out infinite;
  }

  .ember-1 {
    animation-delay: 0s;
  }
  .ember-2 {
    animation-delay: 2.3s;
  }
  .ember-3 {
    animation-delay: 4.6s;
  }

  @keyframes ember-rise {
    0% {
      opacity: 0;
      transform: translateY(0);
    }
    15% {
      opacity: 0.8;
    }
    100% {
      opacity: 0;
      transform: translateY(-120px);
    }
  }

  .torch-flicker {
    animation: torch-flicker 2s steps(4, end) infinite;
  }

  @keyframes torch-flicker {
    0%,
    100% {
      opacity: 0.9;
    }
    50% {
      opacity: 0.7;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .castle-section {
      transition: none;
    }
    .castle-section:hover {
      transform: none;
    }
    .window-flicker,
    .forge-pulse,
    .smoke,
    .star-twinkle,
    .moon-glow,
    .flag-wave,
    .spark,
    .ember,
    .torch-flicker {
      animation: none !important;
    }
  }
</style>
