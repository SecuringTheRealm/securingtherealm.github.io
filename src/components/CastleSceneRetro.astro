---
/**
 * CastleSceneRetro.astro
 * 8-bit pixel art castle scene inspired by Dover Castle and classic Zelda games.
 * Integrated castle with tower, library, forge, battlements, and newsletter scrolls.
 * All coordinates snap to 8px grid, 2px strokes, CSS variable colors only.
 */

const uid = Math.random().toString(36).slice(2, 11)

// Reusable window component (inline) - returns coordinate object
const Window = (x: number, y: number) => ({
  outer: { x, y, width: 32, height: 40 },
  inner: { x: x + 2, y: y + 2, width: 28, height: 36 },
  crossV: { x: x + 14, y: y + 2, width: 2, height: 36 },
  crossH: { x: x + 2, y: y + 18, width: 28, height: 2 },
})

// Reusable merlon/battlement component
const Merlon = (x: number, y: number) => ({
  main: { x, y, width: 24, height: 24 },
  highlight: { x: x + 2, y, width: 20, height: 2 },
  shadow: { x, y: y + 2, width: 2, height: 20 },
})

// Brick texture helper (8x8 grid-aligned bricks)
const Brick = (x: number, y: number, offset = 0) => ({
  main: { x: x + offset, y, width: 16, height: 8 },
  highlight: { x: x + offset + 1, y: y + 1, width: 14, height: 2 },
})
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 1200 600"
  role="img"
  aria-labelledby={`${uid}-title`}
  class="castle-scene-retro"
>
  <title id={`${uid}-title`}>
    Securing the Realm - 8-bit Castle Navigation
  </title>
  <desc id={`${uid}-desc`}>
    A pixel-art castle with four sections: Tower (talks), Library (blog), Forge
    (projects), and Newsletter scrolls.
  </desc>

  <defs>
    <linearGradient id={`${uid}-sky`} x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color: var(--colour-sky-dark)"></stop>
      <stop offset="60%" style="stop-color: var(--colour-teal-dark)"></stop>
      <stop offset="100%" style="stop-color: var(--colour-teal-bg)"></stop>
    </linearGradient>

    <linearGradient id={`${uid}-ground`} x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color: var(--colour-grass)"></stop>
      <stop offset="40%" style="stop-color: var(--colour-ground-mid)"></stop>
      <stop offset="100%" style="stop-color: var(--colour-ground-dark)"></stop>
    </linearGradient>

    <radialGradient id={`${uid}-forge-glow`}>
      <stop
        offset="0%"
        style="stop-color: var(--colour-forge-yellow); stop-opacity: 0.9"
      ></stop>
      <stop
        offset="60%"
        style="stop-color: var(--colour-forge-orange); stop-opacity: 0.6"
      ></stop>
      <stop
        offset="100%"
        style="stop-color: var(--colour-forge-orange); stop-opacity: 0"></stop>
    </radialGradient>
  </defs>

  <!-- Sky Background -->
  <rect width="1200" height="480" fill={`url(#${uid}-sky)`}></rect>

  <!-- Stars -->
  {
    [
      [120, 80],
      [280, 120],
      [480, 40],
      [720, 96],
      [920, 64],
      [1080, 128],
      [200, 160],
      [600, 136],
    ].map(([x, y]) => (
      <g class="star-twinkle">
        <rect
          x={x + 3}
          y={y}
          width="2"
          height="8"
          fill="var(--colour-parchment)"
          opacity="0.8"
        />
        <rect
          x={x}
          y={y + 3}
          width="8"
          height="2"
          fill="var(--colour-parchment)"
          opacity="0.8"
        />
      </g>
    ))
  }

  <!-- Flying Birds (Nintendo-style life) -->
  <g class="bird bird-1">
    <path
      d="M 320 200 L 316 196 L 320 192"
      stroke="var(--colour-parchment)"
      stroke-width="2"
      fill="none"
      opacity="0.6"></path>
    <path
      d="M 320 200 L 324 196 L 320 192"
      stroke="var(--colour-parchment)"
      stroke-width="2"
      fill="none"
      opacity="0.6"></path>
  </g>
  <g class="bird bird-2">
    <path
      d="M 680 160 L 676 156 L 680 152"
      stroke="var(--colour-parchment)"
      stroke-width="2"
      fill="none"
      opacity="0.7"></path>
    <path
      d="M 680 160 L 684 156 L 680 152"
      stroke="var(--colour-parchment)"
      stroke-width="2"
      fill="none"
      opacity="0.7"></path>
  </g>
  <g class="bird bird-3">
    <path
      d="M 920 180 L 916 176 L 920 172"
      stroke="var(--colour-parchment)"
      stroke-width="2"
      fill="none"
      opacity="0.5"></path>
    <path
      d="M 920 180 L 924 176 L 920 172"
      stroke="var(--colour-parchment)"
      stroke-width="2"
      fill="none"
      opacity="0.5"></path>
  </g>

  <!-- Moon -->
  <circle
    cx="1080"
    cy="120"
    r="48"
    fill="var(--colour-parchment)"
    opacity="0.3"
    class="moon-glow"></circle>
  <circle cx="1080" cy="120" r="40" fill="var(--colour-parchment)"></circle>
  <!-- Moon craters (8-bit style) -->
  <circle
    cx="1072"
    cy="112"
    r="8"
    fill="var(--colour-stone-light)"
    opacity="0.3"></circle>
  <circle
    cx="1088"
    cy="124"
    r="6"
    fill="var(--colour-stone-light)"
    opacity="0.3"></circle>
  <circle
    cx="1084"
    cy="108"
    r="4"
    fill="var(--colour-stone-light)"
    opacity="0.3"></circle>

  <!-- Ground -->
  <rect x="0" y="480" width="1200" height="120" fill={`url(#${uid}-ground)`}
  ></rect>

  <!-- Grass texture (8-bit pixel blades) -->
  {
    [...Array(80)].map((_, i: number) => {
      const x = (i * 15 + (i % 3) * 8) % 1200
      const y = 480 + (i % 3) * 4
      return (
        <g opacity="0.5">
          <rect x={x} y={y} width="2" height="8" fill="var(--colour-grass)" />
          <rect
            x={x + 4}
            y={y + 2}
            width="2"
            height="6"
            fill="var(--colour-grass)"
          />
        </g>
      )
    })
  }

  <!-- Foundation (Substantial Dover-style base) -->
  <rect
    x="80"
    y="420"
    width="1040"
    height="60"
    fill="var(--colour-foundation-dark)"
    stroke="var(--colour-black)"
    stroke-width="2"></rect>
  <rect
    x="80"
    y="420"
    width="1040"
    height="4"
    fill="var(--colour-white)"
    opacity="0.08"></rect>
  <rect
    x="80"
    y="420"
    width="8"
    height="60"
    fill="var(--colour-black)"
    opacity="0.15"></rect>

  <!-- CONNECTING CURTAIN WALLS (Dover-style integrated fortress) -->
  <!-- Wall between Tower and Library -->
  <rect
    x="320"
    y="360"
    width="40"
    height="80"
    fill="var(--colour-stone)"
    stroke="var(--colour-black)"
    stroke-width="2"></rect>
  <rect
    x="352"
    y="360"
    width="8"
    height="80"
    fill="var(--colour-white)"
    opacity="0.10"></rect>

  <!-- Wall between Library and Keep -->
  <rect
    x="560"
    y="320"
    width="40"
    height="120"
    fill="var(--colour-stone)"
    stroke="var(--colour-black)"
    stroke-width="2"></rect>
  <rect
    x="592"
    y="320"
    width="8"
    height="120"
    fill="var(--colour-white)"
    opacity="0.10"></rect>

  <!-- Wall between Keep and Forge -->
  <rect
    x="840"
    y="320"
    width="40"
    height="120"
    fill="var(--colour-stone)"
    stroke="var(--colour-black)"
    stroke-width="2"></rect>
  <rect
    x="872"
    y="320"
    width="8"
    height="120"
    fill="var(--colour-white)"
    opacity="0.10"></rect>

  <!-- TOWER SECTION (Left) -->
  <a href="/talks/" aria-label="Tower - View video talks">
    <g class="castle-section">
      <!-- Tower Body (TALLER) -->
      <rect
        x="160"
        y="120"
        width="160"
        height="320"
        fill="var(--colour-stone)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="312"
        y="120"
        width="8"
        height="320"
        fill="var(--colour-white)"
        opacity="0.10"></rect>
      <rect
        x="160"
        y="120"
        width="8"
        height="320"
        fill="var(--colour-black)"
        opacity="0.15"></rect>

      <!-- Ivy climbing tower (Nintendo charm) -->
      <path
        d="M 168 420 L 168 380 L 172 360 L 168 340 L 172 320"
        stroke="var(--colour-grass)"
        stroke-width="3"
        fill="none"
        opacity="0.4"></path>
      <circle cx="168" cy="410" r="3" fill="var(--colour-grass)" opacity="0.5"
      ></circle>
      <circle cx="172" cy="370" r="3" fill="var(--colour-grass)" opacity="0.5"
      ></circle>
      <circle cx="168" cy="350" r="3" fill="var(--colour-grass)" opacity="0.5"
      ></circle>

      <!-- Tower brick texture (subtle 8-bit detail) -->
      {
        [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        ].map((row: number) => (
          <g opacity="0.15">
            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((col: number) => {
              const b = Brick(
                168 + col * 16,
                128 + row * 16,
                row % 2 === 0 ? 0 : -8
              )
              return <rect {...b.main} fill="var(--colour-black)" />
            })}
          </g>
        ))
      }

      <!-- Tower flag (animated) -->
      <rect x="236" y="72" width="8" height="48" fill="var(--colour-stone-dark)"
      ></rect>
      <path
        d="M 244 76 L 268 84 L 244 92 Z"
        fill="var(--colour-gold)"
        stroke="var(--colour-gold-dark)"
        stroke-width="1"
        class="flag-wave"></path>
      <path
        d="M 244 76 L 268 84 L 244 92 Z"
        fill="var(--colour-gold-dark)"
        opacity="0.3"
        transform="translate(2, 2)"></path>

      <!-- Tower Battlements -->
      {
        [0, 1, 2, 3, 4, 5].map((i: number) => {
          const m = Merlon(160 + i * 24 + (i % 2 === 0 ? 0 : 12), 96)
          return (
            <g>
              <rect
                {...m.main}
                fill="var(--colour-stone)"
                stroke="var(--colour-black)"
                stroke-width="2"
              />
              <rect
                {...m.highlight}
                fill="var(--colour-white)"
                opacity="0.12"
              />
              <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
            </g>
          )
        })
      }

      <!-- Tower Windows -->
      {
        [
          Window(200, 160),
          Window(200, 240),
          Window(200, 320),
          Window(200, 400),
        ].map((w, i: number) => (
          <g class="window-glow">
            <rect {...w.outer} fill="var(--colour-black)" opacity="0.25" />
            <rect {...w.inner} fill="var(--colour-gold)" opacity="0.7" />
            <rect {...w.crossV} fill="var(--colour-stone-dark)" opacity="0.4" />
            <rect {...w.crossH} fill="var(--colour-stone-dark)" opacity="0.4" />
            {/* Curtain in first window (Nintendo personality) */}
            {i === 0 && (
              <rect
                x={w.inner.x}
                y={w.inner.y}
                width="8"
                height={w.inner.height}
                fill="var(--colour-forge-orange)"
                opacity="0.3"
              />
            )}
          </g>
        ))
      }

      <!-- Label -->
      <text
        x="240"
        y="88"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="11"
        letter-spacing="1">TOWER</text
      >

      <rect
        x="160"
        y="96"
        width="160"
        height="344"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- LIBRARY SECTION (Center-Left) -->
  <a href="/blog/" aria-label="Library - Read blog posts">
    <g class="castle-section">
      <!-- Library Body -->
      <rect
        x="360"
        y="240"
        width="200"
        height="200"
        fill="var(--colour-stone)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="552"
        y="240"
        width="8"
        height="200"
        fill="var(--colour-white)"
        opacity="0.10"></rect>
      <rect
        x="360"
        y="240"
        width="8"
        height="200"
        fill="var(--colour-black)"
        opacity="0.15"></rect>

      <!-- Library brick texture -->
      {
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((row: number) => (
          <g opacity="0.15">
            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((col: number) => {
              const b = Brick(
                368 + col * 16,
                248 + row * 16,
                row % 2 === 0 ? 0 : -8
              )
              return <rect {...b.main} fill="var(--colour-black)" />
            })}
          </g>
        ))
      }

      <!-- Library flag -->
      <rect
        x="456"
        y="132"
        width="8"
        height="48"
        fill="var(--colour-stone-dark)"></rect>
      <path
        d="M 464 136 L 488 144 L 464 152 Z"
        fill="var(--colour-gold)"
        stroke="var(--colour-gold-dark)"
        stroke-width="1"
        class="flag-wave"
        style="animation-delay: 0.5s"></path>
      <path
        d="M 464 136 L 488 144 L 464 152 Z"
        fill="var(--colour-gold-dark)"
        opacity="0.3"
        transform="translate(2, 2)"></path>

      <!-- Library Roof (Link's Awakening rounded style) -->
      <ellipse
        cx="460"
        cy="240"
        rx="110"
        ry="60"
        fill="var(--colour-roof-depth)"
        stroke="var(--colour-black)"
        stroke-width="2"></ellipse>
      <!-- Roof shading -->
      <ellipse
        cx="460"
        cy="235"
        rx="105"
        ry="55"
        fill="var(--colour-black)"
        opacity="0.15"></ellipse>
      <!-- Roof highlight -->
      <ellipse
        cx="460"
        cy="245"
        rx="100"
        ry="50"
        fill="var(--colour-white)"
        opacity="0.08"></ellipse>

      <!-- Library Battlements -->
      {
        [0, 1, 2, 3, 4, 5, 6, 7].map((i: number) => {
          const m = Merlon(360 + i * 24 + (i % 2 === 0 ? 0 : 12), 216)
          return (
            <g>
              <rect
                {...m.main}
                fill="var(--colour-stone)"
                stroke="var(--colour-black)"
                stroke-width="2"
              />
              <rect
                {...m.highlight}
                fill="var(--colour-white)"
                opacity="0.12"
              />
              <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
            </g>
          )
        })
      }

      <!-- Library Windows -->
      {
        [
          Window(380, 272),
          Window(444, 272),
          Window(508, 272),
          Window(380, 344),
          Window(508, 344),
        ].map((w) => (
          <g class="window-glow">
            <rect {...w.outer} fill="var(--colour-black)" opacity="0.25" />
            <rect {...w.inner} fill="var(--colour-gold)" opacity="0.7" />
            <rect {...w.crossV} fill="var(--colour-stone-dark)" opacity="0.4" />
            <rect {...w.crossH} fill="var(--colour-stone-dark)" opacity="0.4" />
          </g>
        ))
      }

      <!-- Library Door (OPEN with visible books) -->
      <rect
        x="440"
        y="384"
        width="40"
        height="56"
        fill="var(--colour-black)"
        opacity="0.6"></rect>
      <ellipse cx="460" cy="384" rx="20" ry="8" fill="var(--colour-stone-dark)"
      ></ellipse>

      <!-- Visible books on shelves inside -->
      <g opacity="0.9">
        <!-- Left shelf books -->
        <rect
          x="444"
          y="392"
          width="6"
          height="12"
          fill="var(--colour-gold-dark)"></rect>
        <rect
          x="450"
          y="392"
          width="4"
          height="12"
          fill="var(--colour-parchment)"></rect>
        <rect
          x="454"
          y="392"
          width="6"
          height="12"
          fill="var(--colour-stone-dark)"></rect>
        <rect
          x="444"
          y="408"
          width="5"
          height="12"
          fill="var(--colour-parchment)"></rect>
        <rect x="449" y="408" width="6" height="12" fill="var(--colour-gold)"
        ></rect>
        <rect x="455" y="408" width="5" height="12" fill="var(--colour-stone)"
        ></rect>

        <!-- Right shelf books -->
        <rect x="464" y="392" width="6" height="12" fill="var(--colour-stone)"
        ></rect>
        <rect
          x="470"
          y="392"
          width="5"
          height="12"
          fill="var(--colour-gold-dark)"></rect>
        <rect
          x="464"
          y="408"
          width="6"
          height="12"
          fill="var(--colour-parchment)"></rect>
        <rect x="470" y="408" width="6" height="12" fill="var(--colour-gold)"
        ></rect>
      </g>

      <!-- Label -->
      <text
        x="460"
        y="168"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="11"
        letter-spacing="1">LIBRARY</text
      >

      <rect
        x="360"
        y="180"
        width="210"
        height="260"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- MAIN KEEP (Center - massive Great Tower like Dover) -->
  <g>
    <!-- Thicker walls with buttressing -->
    <rect
      x="592"
      y="160"
      width="256"
      height="280"
      fill="var(--colour-stone)"
      stroke="var(--colour-black)"
      stroke-width="2"></rect>
    <rect
      x="840"
      y="160"
      width="8"
      height="280"
      fill="var(--colour-white)"
      opacity="0.12"></rect>
    <rect
      x="592"
      y="160"
      width="8"
      height="280"
      fill="var(--colour-black)"
      opacity="0.18"></rect>

    <!-- Corner buttresses (Dover has prominent corners) -->
    <rect
      x="584"
      y="160"
      width="16"
      height="280"
      fill="var(--colour-stone-dark)"
      opacity="0.3"></rect>
    <rect
      x="848"
      y="160"
      width="16"
      height="280"
      fill="var(--colour-stone-dark)"
      opacity="0.3"></rect>

    <!-- Keep brick texture -->
    {
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17].map(
        (row: number) => (
          <g opacity="0.15">
            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14].map(
              (col: number) => {
                const b = Brick(
                  608 + col * 16,
                  168 + row * 16,
                  row % 2 === 0 ? 0 : -8
                )
                return <rect {...b.main} fill="var(--colour-black)" />
              }
            )}
          </g>
        )
      )
    }

    <!-- Keep flag (tallest) -->
    <rect x="716" y="88" width="8" height="72" fill="var(--colour-stone-dark)"
    ></rect>
    <path
      d="M 724 92 L 756 104 L 724 116 Z"
      fill="var(--colour-gold)"
      stroke="var(--colour-gold-dark)"
      stroke-width="1"
      class="flag-wave"
      style="animation-delay: 0.3s"></path>
    <path
      d="M 724 92 L 756 104 L 724 116 Z"
      fill="var(--colour-gold-dark)"
      opacity="0.3"
      transform="translate(2, 2)"></path>

    <!-- Heraldic banners (Ultima Online style) -->
    <!-- Left banner -->
    <rect
      x="604"
      y="220"
      width="16"
      height="48"
      fill="var(--colour-teal-dark)"
      stroke="var(--colour-black)"
      stroke-width="1"
      opacity="0.9"></rect>
    <path
      d="M 604 268 L 612 260 L 620 268 Z"
      fill="var(--colour-teal-dark)"
      opacity="0.9"></path>
    <rect
      x="608"
      y="228"
      width="8"
      height="8"
      fill="var(--colour-gold)"
      opacity="0.8"></rect>
    <!-- Right banner -->
    <rect
      x="820"
      y="220"
      width="16"
      height="48"
      fill="var(--colour-teal-dark)"
      stroke="var(--colour-black)"
      stroke-width="1"
      opacity="0.9"></rect>
    <path
      d="M 820 268 L 828 260 L 836 268 Z"
      fill="var(--colour-teal-dark)"
      opacity="0.9"></path>
    <rect
      x="824"
      y="228"
      width="8"
      height="8"
      fill="var(--colour-gold)"
      opacity="0.8"></rect>

    <!-- Keep Battlements -->
    {
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((i: number) => {
        const m = Merlon(592 + i * 24 + (i % 2 === 0 ? 0 : 12), 136)
        return (
          <g>
            <rect
              {...m.main}
              fill="var(--colour-stone)"
              stroke="var(--colour-black)"
              stroke-width="2"
            />
            <rect {...m.highlight} fill="var(--colour-white)" opacity="0.12" />
            <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
          </g>
        )
      })
    }

    <!-- Keep Windows -->
    {
      [
        Window(632, 192),
        Window(768, 192),
        Window(632, 272),
        Window(768, 272),
        Window(632, 352),
        Window(768, 352),
      ].map((w) => (
        <g class="window-glow">
          <rect {...w.outer} fill="var(--colour-black)" opacity="0.25" />
          <rect {...w.inner} fill="var(--colour-gold)" opacity="0.7" />
          <rect {...w.crossV} fill="var(--colour-stone-dark)" opacity="0.4" />
          <rect {...w.crossH} fill="var(--colour-stone-dark)" opacity="0.4" />
        </g>
      ))
    }

    <!-- Torch Sconces (Ultima Online style) -->
    <!-- Left torch -->
    <rect x="612" y="300" width="8" height="16" fill="var(--colour-stone-dark)"
    ></rect>
    <path d="M 616 296 L 612 300 L 620 300 Z" fill="var(--colour-stone-dark)"
    ></path>
    <ellipse
      cx="616"
      cy="288"
      rx="6"
      ry="8"
      fill="var(--colour-forge-orange)"
      opacity="0.8"
      class="torch-flicker"></ellipse>
    <ellipse
      cx="616"
      cy="284"
      rx="4"
      ry="6"
      fill="var(--colour-forge-yellow)"
      opacity="0.9"
      class="torch-flicker"></ellipse>
    <!-- Right torch -->
    <rect x="820" y="300" width="8" height="16" fill="var(--colour-stone-dark)"
    ></rect>
    <path d="M 824 296 L 820 300 L 828 300 Z" fill="var(--colour-stone-dark)"
    ></path>
    <ellipse
      cx="824"
      cy="288"
      rx="6"
      ry="8"
      fill="var(--colour-forge-orange)"
      opacity="0.8"
      class="torch-flicker"></ellipse>
    <ellipse
      cx="824"
      cy="284"
      rx="4"
      ry="6"
      fill="var(--colour-forge-yellow)"
      opacity="0.9"
      class="torch-flicker"></ellipse>

    <!-- Keep Gate -->
    <rect
      x="684"
      y="368"
      width="72"
      height="72"
      fill="var(--colour-teal-dark)"
      stroke="var(--colour-black)"
      stroke-width="2"></rect>
    <rect
      x="712"
      y="368"
      width="2"
      height="72"
      fill="var(--colour-stone-dark)"
      opacity="0.5"></rect>

    <!-- Portcullis chains (8-bit pixel chains) -->
    <rect x="692" y="368" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="692" y="376" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="692" y="384" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="744" y="368" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="744" y="376" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
    <rect x="744" y="384" width="4" height="4" fill="var(--colour-stone-dark)"
    ></rect>
  </g>

  <!-- FORGE SECTION (Right) -->
  <a href="/forge/" aria-label="Forge - Explore code projects">
    <g class="castle-section">
      <!-- Forge Body (OPEN FRONTED) -->
      <rect
        x="880"
        y="280"
        width="160"
        height="160"
        fill="var(--colour-stone)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="1032"
        y="280"
        width="8"
        height="160"
        fill="var(--colour-white)"
        opacity="0.10"></rect>
      <rect
        x="880"
        y="280"
        width="8"
        height="160"
        fill="var(--colour-black)"
        opacity="0.15"></rect>

      <!-- Chimney -->
      <rect
        x="936"
        y="200"
        width="48"
        height="80"
        fill="var(--colour-stone-dark)"
        stroke="var(--colour-black)"
        stroke-width="2"></rect>
      <rect
        x="976"
        y="200"
        width="8"
        height="80"
        fill="var(--colour-white)"
        opacity="0.08"></rect>

      <!-- Smoke -->
      <ellipse
        cx="960"
        cy="184"
        rx="16"
        ry="12"
        fill="var(--colour-smoke)"
        opacity="0.4"
        class="smoke smoke-1"></ellipse>
      <ellipse
        cx="956"
        cy="168"
        rx="20"
        ry="14"
        fill="var(--colour-smoke)"
        opacity="0.3"
        class="smoke smoke-2"></ellipse>
      <ellipse
        cx="964"
        cy="152"
        rx="18"
        ry="13"
        fill="var(--colour-smoke)"
        opacity="0.2"
        class="smoke smoke-3"></ellipse>

      <!-- Open Forge Interior (no front wall, visible workshop) -->
      <rect
        x="900"
        y="340"
        width="120"
        height="100"
        fill="var(--colour-black)"
        opacity="0.3"></rect>

      <!-- Forge/Furnace with Glow (center back) -->
      <rect
        x="936"
        y="320"
        width="48"
        height="64"
        fill={`url(#${uid}-forge-glow)`}
        class="forge-glow-animation"></rect>
      <rect
        x="940"
        y="324"
        width="40"
        height="56"
        fill="var(--colour-forge-orange)"
        opacity="0.9"
        class="forge-glow-animation"></rect>

      <!-- Forge sparks (8-bit particles) -->
      <rect
        x="932"
        y="316"
        width="4"
        height="4"
        fill="var(--colour-forge-yellow)"
        class="spark spark-1"></rect>
      <rect
        x="980"
        y="312"
        width="4"
        height="4"
        fill="var(--colour-forge-yellow)"
        class="spark spark-2"></rect>
      <rect
        x="944"
        y="308"
        width="4"
        height="4"
        fill="var(--colour-gold-light)"
        class="spark spark-3"></rect>
      <rect
        x="968"
        y="318"
        width="4"
        height="4"
        fill="var(--colour-forge-yellow)"
        class="spark spark-4"></rect>

      <!-- Glowing embers rising (Nintendo magic) -->
      <circle
        cx="952"
        cy="280"
        r="2"
        fill="var(--colour-forge-yellow)"
        opacity="0.8"
        class="ember ember-1"></circle>
      <circle
        cx="964"
        cy="260"
        r="2"
        fill="var(--colour-forge-orange)"
        opacity="0.6"
        class="ember ember-2"></circle>
      <circle
        cx="958"
        cy="240"
        r="1.5"
        fill="var(--colour-gold-light)"
        opacity="0.4"
        class="ember ember-3"></circle>

      <!-- Anvil (visible in front) -->
      <rect
        x="904"
        y="400"
        width="32"
        height="8"
        fill="var(--colour-stone-dark)"></rect>
      <rect
        x="912"
        y="392"
        width="16"
        height="8"
        fill="var(--colour-stone-dark)"></rect>
      <rect x="916" y="384" width="8" height="8" fill="var(--colour-stone-dark)"
      ></rect>
      <rect
        x="914"
        y="408"
        width="12"
        height="32"
        fill="var(--colour-stone-dark)"></rect>
      <!-- Anvil highlight -->
      <rect
        x="916"
        y="384"
        width="6"
        height="2"
        fill="var(--colour-white)"
        opacity="0.4"></rect>

      <!-- Tools on wall (hammer, tongs) -->
      <rect
        x="888"
        y="300"
        width="4"
        height="24"
        fill="var(--colour-stone-dark)"></rect>
      <rect x="886" y="296" width="8" height="8" fill="var(--colour-stone-dark)"
      ></rect>
      <rect
        x="1028"
        y="304"
        width="4"
        height="20"
        fill="var(--colour-stone-dark)"></rect>
      <rect
        x="1026"
        y="300"
        width="8"
        height="4"
        fill="var(--colour-stone-dark)"></rect>

      <!-- Forge Battlements -->
      {
        [0, 1, 2, 3, 4, 5].map((i: number) => {
          const m = Merlon(880 + i * 24 + (i % 2 === 0 ? 0 : 12), 256)
          return (
            <g>
              <rect
                {...m.main}
                fill="var(--colour-stone)"
                stroke="var(--colour-black)"
                stroke-width="2"
              />
              <rect
                {...m.highlight}
                fill="var(--colour-white)"
                opacity="0.12"
              />
              <rect {...m.shadow} fill="var(--colour-black)" opacity="0.15" />
            </g>
          )
        })
      }

      <!-- Weathering/moss stains (Ultima Online lived-in feel) -->
      <ellipse
        cx="900"
        cy="380"
        rx="12"
        ry="16"
        fill="var(--colour-grass)"
        opacity="0.15"></ellipse>
      <ellipse
        cx="1020"
        cy="400"
        rx="10"
        ry="14"
        fill="var(--colour-grass)"
        opacity="0.12"></ellipse>

      <!-- Label -->
      <text
        x="960"
        y="248"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="11"
        letter-spacing="1">FORGE</text
      >

      <rect
        x="880"
        y="200"
        width="160"
        height="240"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- NEWSLETTER SCROLLS (On the Lawn) -->
  <a href="/newsletter/" aria-label="Newsletter - Subscribe to updates">
    <g class="castle-section">
      <!-- Flowers around scroll (Nintendo charm) -->
      <!-- Red flower -->
      <circle cx="1028" cy="540" r="4" fill="var(--colour-forge-orange)"
      ></circle>
      <rect x="1026" y="542" width="2" height="8" fill="var(--colour-grass)"
      ></rect>
      <!-- Yellow flower -->
      <circle cx="1164" cy="548" r="4" fill="var(--colour-gold)"></circle>
      <rect x="1162" y="550" width="2" height="8" fill="var(--colour-grass)"
      ></rect>
      <!-- Pink flower -->
      <circle cx="1020" cy="560" r="3" fill="var(--colour-gold-light)"></circle>
      <rect x="1018" y="562" width="2" height="6" fill="var(--colour-grass)"
      ></rect>

      <!-- Scroll -->
      <rect
        x="1040"
        y="520"
        width="112"
        height="72"
        rx="4"
        fill="var(--colour-parchment)"
        stroke="var(--colour-stone-dark)"
        stroke-width="2"></rect>
      <ellipse
        cx="1040"
        cy="556"
        rx="8"
        ry="36"
        fill="var(--colour-parchment-light)"
        stroke="var(--colour-stone-dark)"
        stroke-width="2"></ellipse>
      <ellipse
        cx="1152"
        cy="556"
        rx="8"
        ry="36"
        fill="var(--colour-parchment)"
        stroke="var(--colour-stone-dark)"
        stroke-width="2"></ellipse>

      <!-- Wax Seal -->
      <circle
        cx="1096"
        cy="556"
        r="16"
        fill="var(--colour-gold-dark)"
        stroke="var(--colour-black)"
        stroke-width="2"></circle>
      <text
        x="1096"
        y="562"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="12"
        font-weight="700">S</text
      >

      <!-- Label -->
      <text
        x="1096"
        y="512"
        text-anchor="middle"
        fill="var(--colour-parchment)"
        font-family="'Press Start 2P', monospace"
        font-size="9"
        letter-spacing="1">NEWSLETTER</text
      >

      <rect
        x="1032"
        y="504"
        width="128"
        height="96"
        fill="var(--colour-gold)"
        opacity="0"
        class="section-hover"></rect>
    </g>
  </a>

  <!-- Ground Shadows (SEGA-style layered depth) -->
  <!-- Deep shadow layer -->
  <ellipse
    cx="240"
    cy="488"
    rx="80"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.3"></ellipse>
  <!-- Mid shadow -->
  <ellipse
    cx="240"
    cy="486"
    rx="72"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>

  <ellipse
    cx="460"
    cy="488"
    rx="100"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.3"></ellipse>
  <ellipse
    cx="460"
    cy="486"
    rx="92"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>

  <ellipse
    cx="720"
    cy="488"
    rx="120"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.35"></ellipse>
  <ellipse
    cx="720"
    cy="486"
    rx="112"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>

  <ellipse
    cx="960"
    cy="488"
    rx="80"
    ry="16"
    fill="var(--colour-black)"
    opacity="0.3"></ellipse>
  <ellipse
    cx="960"
    cy="486"
    rx="72"
    ry="14"
    fill="var(--colour-black)"
    opacity="0.15"></ellipse>
</svg>

<style>
  .castle-scene-retro {
    width: 100%;
    height: auto;
    max-width: 1200px;
    display: block;
    shape-rendering: crispEdges;
  }

  @supports (image-rendering: pixelated) {
    .castle-scene-retro {
      image-rendering: pixelated;
    }
  }

  .castle-section {
    cursor: pointer;
    transition: transform 0.25s ease-in-out;
  }

  .castle-section:hover {
    transform: scale(1.02);
  }

  .castle-section:focus-visible {
    outline: 3px solid var(--colour-gold);
    outline-offset: 4px;
  }

  .section-hover {
    transition: opacity 0.25s ease-in-out;
  }

  .castle-section:hover .section-hover {
    opacity: 0.15;
  }

  .window-glow {
    animation: window-pulse 3s ease-in-out infinite;
  }

  @keyframes window-pulse {
    0%,
    100% {
      opacity: 0.8;
    }
    50% {
      opacity: 1;
    }
  }

  .forge-glow-animation {
    animation: forge-pulse 1.5s ease-in-out infinite;
  }

  @keyframes forge-pulse {
    0%,
    100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }

  .smoke {
    animation: smoke-rise 4s ease-in-out infinite;
  }

  .smoke-1 {
    animation-delay: 0s;
  }
  .smoke-2 {
    animation-delay: 1.3s;
  }
  .smoke-3 {
    animation-delay: 2.6s;
  }

  @keyframes smoke-rise {
    0% {
      transform: translateY(0) scale(1);
      opacity: 0.4;
    }
    50% {
      opacity: 0.2;
    }
    100% {
      transform: translateY(-32px) scale(1.3);
      opacity: 0;
    }
  }

  .star-twinkle {
    animation: star-twinkle 2.5s ease-in-out infinite;
  }

  @keyframes star-twinkle {
    0%,
    100% {
      opacity: 0.5;
    }
    50% {
      opacity: 1;
    }
  }

  .moon-glow {
    animation: moon-pulse 4s ease-in-out infinite;
  }

  @keyframes moon-pulse {
    0%,
    100% {
      opacity: 0.3;
    }
    50% {
      opacity: 0.6;
    }
  }

  .flag-wave {
    animation: flag-wave 2s ease-in-out infinite;
    transform-origin: left center;
  }

  @keyframes flag-wave {
    0%,
    100% {
      transform: scaleX(1) translateX(0);
    }
    25% {
      transform: scaleX(0.95) translateX(-2px);
    }
    50% {
      transform: scaleX(1) translateX(0);
    }
    75% {
      transform: scaleX(1.05) translateX(2px);
    }
  }

  .spark {
    animation: spark-pop 1.5s ease-in-out infinite;
  }

  .spark-1 {
    animation-delay: 0s;
  }
  .spark-2 {
    animation-delay: 0.3s;
  }
  .spark-3 {
    animation-delay: 0.6s;
  }
  .spark-4 {
    animation-delay: 0.9s;
  }

  @keyframes spark-pop {
    0%,
    100% {
      opacity: 0;
      transform: translateY(0) scale(0.5);
    }
    20% {
      opacity: 1;
      transform: translateY(-8px) scale(1);
    }
    40% {
      opacity: 0.8;
      transform: translateY(-16px) scale(0.8);
    }
    60% {
      opacity: 0.4;
      transform: translateY(-24px) scale(0.6);
    }
    80%,
    100% {
      opacity: 0;
      transform: translateY(-32px) scale(0.3);
    }
  }

  /* Nintendo-style flying birds */
  .bird {
    animation: bird-fly 8s ease-in-out infinite;
  }

  .bird-1 {
    animation-delay: 0s;
  }
  .bird-2 {
    animation-delay: 2.7s;
  }
  .bird-3 {
    animation-delay: 5.4s;
  }

  @keyframes bird-fly {
    0% {
      transform: translate(0, 0);
      opacity: 0;
    }
    10% {
      opacity: 0.7;
    }
    50% {
      transform: translate(80px, -40px);
      opacity: 0.8;
    }
    90% {
      opacity: 0.5;
    }
    100% {
      transform: translate(160px, 0);
      opacity: 0;
    }
  }

  /* Glowing embers (Pokémon magic) */
  .ember {
    animation: ember-rise 6s ease-out infinite;
  }

  .ember-1 {
    animation-delay: 0s;
  }
  .ember-2 {
    animation-delay: 2s;
  }
  .ember-3 {
    animation-delay: 4s;
  }

  @keyframes ember-rise {
    0% {
      transform: translateY(0) scale(1);
      opacity: 0;
    }
    10% {
      opacity: 0.8;
    }
    50% {
      opacity: 0.6;
    }
    100% {
      transform: translateY(-160px) scale(0.3);
      opacity: 0;
    }
  }

  /* Torch flicker (Ultima Online atmosphere) */
  .torch-flicker {
    animation: torch-flicker 2s ease-in-out infinite;
  }

  @keyframes torch-flicker {
    0%,
    100% {
      opacity: 0.8;
      transform: scale(1);
    }
    25% {
      opacity: 0.9;
      transform: scale(1.05);
    }
    50% {
      opacity: 0.7;
      transform: scale(0.95);
    }
    75% {
      opacity: 0.85;
      transform: scale(1.02);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .castle-section {
      transition: none;
    }
    .castle-section:hover {
      transform: none;
    }
    .window-glow,
    .forge-glow-animation,
    .smoke,
    .star-twinkle,
    .moon-glow,
    .flag-wave,
    .spark,
    .bird,
    .ember,
    .torch-flicker {
      animation: none !important;
    }
  }
</style>
